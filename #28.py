import logging
import time
import requests
from datetime import datetime
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

API_TOKEN = "8492691594:AAHGomYK8lOc-AUGzJ-PtHGopAixKsPOlI0"

# üîπ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    filename="bot.log",
    filemode="a",
    format="%(asctime)s [%(levelname)s] %(message)s"
)

logger = logging.getLogger(__name__)

# üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è API-–∑–∞–ø—Ä–æ—Å–æ–≤
def log_api_request(url: str, start_time: float, success: bool, error: str = None):
    duration = time.time() - start_time
    if duration > 1:
        logger.warning(f"–î–æ–ª–≥–∏–π –æ—Ç–≤–µ—Ç API: {url} ({duration:.2f} —Å–µ–∫)")
    if success:
        logger.info(f"–£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {url} ({duration:.2f} —Å–µ–∫)")
    else:
        logger.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ {url}: {error}")

# üîπ –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à—ë–ª: ID={user.id}, –ò–º—è={user.first_name}, –í—Ä–µ–º—è={datetime.now()}")
    await update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n–í—ã–±–µ—Ä–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π: /weather –∏–ª–∏ /quote")

# üîπ –ö–æ–º–∞–Ω–¥–∞ /weather (–ø—Ä–∏–º–µ—Ä API-–∑–∞–ø—Ä–æ—Å–∞)
async def weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –≤—ã–±—Ä–∞–ª —Å—Ü–µ–Ω–∞—Ä–∏–π: –ü–æ–≥–æ–¥–∞")

    url = "https://api.open-meteo.com/v1/forecast?latitude=51.17&longitude=71.45&current_weather=true"
    start_time = time.time()

    try:
        response = requests.get(url, timeout=5)
        response.raise_for_status()
        data = response.json()
        temp = data["current_weather"]["temperature"]
        await update.message.reply_text(f"üå§ –°–µ–π—á–∞—Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {temp}¬∞C")
        log_api_request(url, start_time, success=True)
    except Exception as e:
        await update.message.reply_text("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.")
        log_api_request(url, start_time, success=False, error=str(e))

# üîπ –ö–æ–º–∞–Ω–¥–∞ /quote (–ø—Ä–∏–º–µ—Ä API-–∑–∞–ø—Ä–æ—Å–∞)
async def quote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –≤—ã–±—Ä–∞–ª —Å—Ü–µ–Ω–∞—Ä–∏–π: –¶–∏—Ç–∞—Ç–∞")

    urls = [
        "https://api.quotable.io/random",
        "https://zenquotes.io/api/random"  # –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
    ]

    for url in urls:
        start_time = time.time()
        try:
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            data = response.json()

            # –†–∞–∑–Ω—ã–µ API ‚Äî —Ä–∞–∑–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
            if "content" in data:
                text = data["content"]
                author = data["author"]
            elif isinstance(data, list) and "q" in data[0]:
                text = data[0]["q"]
                author = data[0]["a"]
            else:
                raise ValueError("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")

            await update.message.reply_text(f"üí¨ {text}\n‚Äî {author}")
            log_api_request(url, start_time, success=True)
            return

        except Exception as e:
            log_api_request(url, start_time, success=False, error=str(e))

    await update.message.reply_text("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω üöÄ")
    try:
        app = ApplicationBuilder().token(API_TOKEN).build()

        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("weather", weather))
        app.add_handler(CommandHandler("quote", quote))

        app.run_polling()
    finally:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω üõë")
