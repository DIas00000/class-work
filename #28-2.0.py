import asyncio
import random
import requests
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

TOKEN = "8492691594:AAHGomYK8lOc-AUGzJ-PtHGopAixKsPOlI0"

bot = Bot(token=TOKEN)
dp = Dispatcher()

# ================ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ================
def main_menu():
    keyboard = [
        [InlineKeyboardButton(text="üìÖ –ö—É—Ä—Å –≤–∞–ª—é—Ç", callback_data="currency")],
        [InlineKeyboardButton(text="üé¨ –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º", callback_data="movie")],
        [InlineKeyboardButton(text="‚òÅÔ∏è –ü–æ–≥–æ–¥–∞", callback_data="weather_astana")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


@dp.message(Command("start"))
async def start_cmd(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –º—É–ª—å—Ç–∏—Å—Ü–µ–Ω–∞—Ä–Ω—ã–π –±–æ—Ç.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())


# ================ –ö–£–†–° –í–ê–õ–Æ–¢ ================
def get_currency():
    try:
        data = requests.get("https://api.exchangerate-api.com/v4/latest/USD").json()
        kzt = data["rates"]["KZT"]
        eur = data["rates"]["EUR"]
        rub = data["rates"]["RUB"]
        return f"üíµ –ö—É—Ä—Å –≤–∞–ª—é—Ç (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ USD):\n\nüá∞üáø KZT: {kzt:.2f}\nüá™üá∫ EUR: {eur:.2f}\nüá∑üá∫ RUB: {rub:.2f}"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}"


def small_menu(prefix):
    keyboard = [
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"{prefix}_refresh")],
        [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="to_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


@dp.callback_query(F.data == "currency")
async def show_currency(callback: CallbackQuery):
    await callback.message.edit_text(get_currency(), reply_markup=small_menu("currency"))


@dp.callback_query(F.data == "currency_refresh")
async def refresh_currency(callback: CallbackQuery):
    await callback.message.edit_text(get_currency(), reply_markup=small_menu("currency"))


# ================ –°–õ–£–ß–ê–ô–ù–´–ô –§–ò–õ–¨–ú (–ë–ï–ó API-–ö–õ–Æ–ß–ê) ================
def get_random_movie():
    try:
        # –ë–µ—Ä—ë–º —Å–ª—É—á–∞–π–Ω—ã–π –∂–∞–Ω—Ä (–¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ)
        genres = ["action-adventure", "comedy", "drama", "animation", "horror"]
        genre = random.choice(genres)
        url = f"https://api.sampleapis.com/movies/{genre}"
        data = requests.get(url, timeout=5).json()

        if not data:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤."

        movie = random.choice(data)
        title = movie.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        year = movie.get("year", "N/A")
        desc = movie.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        return f"üé¨ {title} ({year})\n\n{desc}"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∏–ª—å–º–∞: {e}"


@dp.callback_query(F.data == "movie")
async def show_movie(callback: CallbackQuery):
    await callback.message.edit_text(get_random_movie(), reply_markup=small_menu("movie"))


@dp.callback_query(F.data == "movie_refresh")
async def refresh_movie(callback: CallbackQuery):
    await callback.message.edit_text(get_random_movie(), reply_markup=small_menu("movie"))


# ================ –ü–û–ì–û–î–ê (Open-Meteo, –±–µ–∑ –∫–ª—é—á–∞) ================
CITIES = {
    "astana": {"name": "–ê—Å—Ç–∞–Ω–∞", "lat": 51.1694, "lon": 71.4491},
    "almaty": {"name": "–ê–ª–º–∞—Ç—ã", "lat": 43.2389, "lon": 76.8897},
    "shymkent": {"name": "–®—ã–º–∫–µ–Ω—Ç", "lat": 42.3417, "lon": 69.5901}
}

def get_weather(city_key: str):
    try:
        city = CITIES[city_key]
        url = f"https://api.open-meteo.com/v1/forecast?latitude={city['lat']}&longitude={city['lon']}&current_weather=true"
        data = requests.get(url, timeout=5).json()
        temp = data["current_weather"]["temperature"]
        wind = data["current_weather"]["windspeed"]
        return f"üåÜ {city['name']}\nüå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\nüí® –í–µ—Ç–µ—Ä: {wind} –∫–º/—á"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {e}"


def city_menu(selected_city):
    keyboard = [
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"weather_{selected_city}")],
        [InlineKeyboardButton(text="üèô –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data="change_city")],
        [InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="to_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


@dp.callback_query(F.data.startswith("weather_"))
async def show_weather(callback: CallbackQuery):
    city_key = callback.data.split("_")[1]
    await callback.message.edit_text(get_weather(city_key), reply_markup=city_menu(city_key))


@dp.callback_query(F.data == "change_city")
async def choose_city(callback: CallbackQuery):
    keyboard = [[InlineKeyboardButton(text=info["name"], callback_data=f"weather_{key}")]
                for key, info in CITIES.items()]
    keyboard.append([InlineKeyboardButton(text="üè† –í –º–µ–Ω—é", callback_data="to_menu")])
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))


# ================ –í –ú–ï–ù–Æ ================
@dp.callback_query(F.data == "to_menu")
async def back_to_menu(callback: CallbackQuery):
    await callback.message.edit_text("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu())


# ================ –ó–ê–ü–£–°–ö ================
async def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
