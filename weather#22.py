import asyncio
import requests
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message

API_TOKEN = "8492691594:AAFSmXXPnv3lL_SEwyJJs9rumwQtisM7r_U"  # ‚Üê –≤—Å—Ç–∞–≤—å —Å—é–¥–∞ —Ç–æ–∫–µ–Ω –æ—Ç BotFather

bot = Bot(token=API_TOKEN)
dp = Dispatcher()


# üìú –ö–æ–º–∞–Ω–¥–∞ /quote ‚Äî —Å–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞
@dp.message(Command("quote"))
async def send_quote(message: Message):
    try:
        response = requests.get("https://api.quotable.io/random", timeout=5)
        data = response.json()
        quote = data["content"]
        author = data["author"]
        await message.answer(f"üí¨ {quote}\n\n‚Äî {author}")
    except Exception as e:
        print(e)
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")


# üå§ –ö–æ–º–∞–Ω–¥–∞ /weather <–≥–æ—Ä–æ–¥>
@dp.message(Command("weather"))
async def get_weather(message: Message):
    try:
        parts = message.text.split(maxsplit=1)
        if len(parts) == 1:
            city = "Aktobe"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        else:
            city = parts[1]

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞
        geo_url = f"https://geocoding-api.open-meteo.com/v1/search?name={city}"
        geo_resp = requests.get(geo_url, timeout=5)
        geo_data = geo_resp.json()

        if "results" not in geo_data or len(geo_data["results"]) == 0:
            await message.answer("‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π.")
            return

        lat = geo_data["results"][0]["latitude"]
        lon = geo_data["results"][0]["longitude"]
        city_name = geo_data["results"][0]["name"]

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥—É
        weather_url = (
            f"https://api.open-meteo.com/v1/forecast?"
            f"latitude={lat}&longitude={lon}&current_weather=true"
        )
        weather_resp = requests.get(weather_url, timeout=5)
        weather_data = weather_resp.json()
        current = weather_data.get("current_weather")

        if not current:
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.")
            return

        temp = current["temperature"]
        wind = current["windspeed"]

        await message.answer(
            f"üå§ –ü–æ–≥–æ–¥–∞ –≤ {city_name}:\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n–í–µ—Ç–µ—Ä: {wind} –º/—Å"
        )

    except Exception as e:
        print(e)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã.")


# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
