import asyncio
import logging
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from requests.exceptions import Timeout, ConnectionError, HTTPError

# üîπ –¢–≤–æ–π —Ç–æ–∫–µ–Ω –æ—Ç BotFather
API_TOKEN = "8492691594:AAFSmXXPnv3lL_SEwyJJs9rumwQtisM7r_U"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
logging.basicConfig(
    filename="errors.log",
    level=logging.ERROR,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()


# üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã —Å API
async def get_quote():
    url = "http://api.quotable.io/random"
    try:
        response = requests.get(url, timeout=5)
        response.raise_for_status()
        data = response.json()
        return f"üí¨ {data['content']}\n\nüë§ ‚Äî {data['author']}"

    except Timeout:
        logging.error("‚è∞ Timeout ‚Äî —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–≤—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞...")
        try:
            # üîÅ –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –æ–¥–∏–Ω —Ä–∞–∑
            response = requests.get(url, timeout=5)
            response.raise_for_status()
            data = response.json()
            return f"üí¨ {data['content']}\n\nüë§ ‚Äî {data['author']}"
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ: {e}")
            return "‚è∞ –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –¥–∞–∂–µ –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

    except ConnectionError:
        logging.error("üö´ ConnectionError ‚Äî –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.")
        return "üö´ –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É. –ü—Ä–æ–≤–µ—Ä—å —Å–µ—Ç—å."

    except HTTPError:
        logging.error("‚ö†Ô∏è HTTPError ‚Äî –æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞.")
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

    except Exception as e:
        logging.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return "‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."


# üîπ –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç üëã\n–ù–∞–±–µ—Ä–∏ /quote, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É!"
    )


# üîπ –ö–æ–º–∞–Ω–¥–∞ /quote
@dp.message(Command("quote"))
async def quote_cmd(message: types.Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å", callback_data="retry_quote")]
        ]
    )
    quote = await get_quote()
    await message.answer(quote, reply_markup=keyboard)


# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ ‚ÄúüîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å‚Äù
@dp.callback_query()
async def retry_quote(callback: types.CallbackQuery):
    if callback.data == "retry_quote":
        quote = await get_quote()
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å", callback_data="retry_quote")]
            ]
        )
        await callback.message.answer(quote, reply_markup=keyboard)
        await callback.answer("üîÅ –¶–∏—Ç–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")


# üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç –∫–æ–º–∞–Ω–¥—ã...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
